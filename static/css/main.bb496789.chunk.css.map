{"version":3,"sources":["webpack://src/App.scss","webpack://src/breakpoints.scss"],"names":[],"mappings":"AASA,KACE,WAAA,CACA,aACE,wBAVQ,CAcZ,YACE,YAAA,CAGF,aACE,gBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,iBAAA,CAEA,mBACE,UAAA,CACA,UAAA,CAEF,kBACE,eAAA,CAGJ,oCACE,iBAAA,CAEF,cACE,eAAA,CACA,UAAA,CACA,kBAAA,CACA,oBAAA,CACA,oBAAA,CACA,aAAA,CAGF,sBACE,kBAAA,CAEF,yBACE,4BAAA,CACA,0BAAA,CACA,2BAAA,CAEF,oCACE,cAAA,CAEF,uBACE,aAAA,CACA,gBAAA,CAKF,UACE,cAAA,CAEF,YACE,aACA,CAMF,qDANE,iBAOA,CC8BE,6CDxBF,YACE,gBAAA,CAEF,cACE,UAAA,CACA,sBAAA,CACA,uBAAA,CACA,oBAAA,CAEF,aACE,oBAAA,CAGF,KACE,WAAA,CACA,YAAA,CAAA,+BAAA,CAKF,4CACE,sBAAA,CAEF,eACE,iBAAA,CACA,WAAA,CACA,iBAAA,CAAA,CCFA,wBDOF,eACE,iBAAA,CACA,WAAA,CACA,iBAAA,CAKF,4CACE,sBAAA,CAEF,cACE,UAAA,CACA,uBAAA,CAEF,aACE,oBAAA,CAEF,2BACE,yBAAA,CAEF,iBACE,mBAAA,CACA,sBAAA,CAEF,YACE,gBAAA,CAEF,yCACE,yBAAA,CAEF,YACE,qBAAA,CAKF,qCACE,YAAA,CAEF,iCACE,yBAAA,CAEF,OACE,aAAA,CAAA,CAGJ,YACE,wBAAA","file":"main.bb496789.chunk.css","sourcesContent":["@import \"./breakpoints.scss\";\r\n\r\n$secondary: #f50057;\r\n$purple: #ae76a6;\r\n$blue: #a3c3d9;\r\n$lOrange: #f8bd7f;\r\n$gray: #efefef;\r\n$red: #E53935;\r\n\r\n.App {\r\n  margin: auto;\r\n  .avatar {\r\n    background-color: $secondary;\r\n  }\r\n}\r\n\r\n.signInRoot {\r\n  height: 100vh;\r\n}\r\n\r\n.signInPaper {\r\n  margin: 64px 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  .form {\r\n    width: 100%;\r\n    margin: 4px;\r\n  }\r\n  .box {\r\n    margin-top: 20px;\r\n  }\r\n}\r\n.dialogRoot .MuiDialog-paperWidthSm {\r\n  overflow-x: hidden;\r\n}\r\n.userMailList {\r\n  max-height: 32vh;\r\n  width: 50vh;\r\n  white-space: initial; \r\n  display:inline-block;\r\n  word-wrap:break-word;\r\n  overflow: auto;\r\n}\r\n//Related with Calendar Event Borders\r\n.rbc-events-container {\r\n  margin: 0 !important;\r\n}\r\n.rbc-day-slot .rbc-event {\r\n  border-style: solid !important;\r\n  border-width: 1px !important;\r\n  border-radius: 6px !important;\r\n}\r\n.rbc-day-slot .rbc-events-container {\r\n  margin-right: 0px;\r\n}\r\n.MuiDialogContent-root {\r\n  flex: 1 1 auto;\r\n  padding: 8px 24px;\r\n}\r\n// End of Calendar Event Borders\r\n\r\n//Manage Co-Working Edit\r\n.editArea {\r\n  text-align: end;\r\n} \r\n.editButton {\r\n  color:$red;\r\n  text-align: center;\r\n}\r\n\r\n//End of Co-Working Edit\r\n\r\n// Fix card's title alignment \r\n.MuiCardHeader-content .MuiTypography-h5 {\r\n  text-align: center;\r\n}\r\n// Fix card's title alignment end\r\n\r\n// if the breakpoint is greater than 360px and less than or eqaul to 425px\r\n@include media(\">phone\", \"<=425px\") {\r\n  .signInRoot {\r\n    font-size: calc(0px + 0.5vmin);\r\n  }\r\n  .userMailList {\r\n    width: 40vh;\r\n    text-overflow: ellipsis;\r\n    width: calc(100% - 10px);  \r\n    word-wrap:break-word;\r\n  }\r\n  .signInPaper {\r\n    margin: 8px !important;\r\n  }\r\n\r\n  .App {\r\n    height: 95vh; /* Fallback for browsers that do not support Custom Properties */\r\n    height: calc(var(--vh, 1vh) * 100);\r\n  }\r\n  .makeStyles-others-462 {\r\n    margin-top: 0px !important;\r\n  }\r\n  .makeStyles-form-461 {\r\n    margin-top: 0px !important;\r\n  }\r\n  .dialogContent{\r\n    text-align: center;\r\n    padding: 8px 8px;\r\n    overflow-x: hidden;\r\n  }\r\n}\r\n//Small size phones\r\n@include media(\"<=phone\") {\r\n  .dialogContent{\r\n    text-align: center;\r\n    padding: 8px 8px;\r\n    overflow-x: hidden;\r\n  }\r\n  .makeStyles-others-462 {\r\n    margin-top: 0px !important;\r\n  }\r\n  .makeStyles-form-461 {\r\n    margin-top: 0px !important;\r\n  }\r\n  .userMailList {\r\n    width: 35vh;\r\n    width: calc(100% - 50px);  \r\n  }\r\n  .signInPaper {\r\n    margin: 8px !important;\r\n  }\r\n  .form .makeStyles-submit-6 {\r\n    margin-top: 10px !important;\r\n  }\r\n  .checkPromotions {\r\n    padding: 0px !important;\r\n    width: calc(100% - 3em);\r\n  }\r\n  .signInRoot {\r\n    font-size: calc(0px + 0.5vmin);\r\n  }\r\n  .signInRoot .MuiFormControl-marginNormal {\r\n    margin-bottom: 0px !important;\r\n  }\r\n  .signUpRoot {\r\n    padding: 2px !important;\r\n  }\r\n  .signUpRoot .logo {\r\n    display: none;\r\n  }\r\n  .signUpRoot .title {\r\n    display: none;\r\n  }\r\n  .signUpRoot .MuiTypography-body1 {\r\n    font-size: small !important;\r\n  }\r\n  .table {\r\n    overflow: auto;\r\n  }\r\n}\r\n.cursor-ptr{\r\n  cursor: pointer !important;\r\n}\r\n","$breakpoints: (\r\n    \"phone\": 360px,\r\n    \"tablet\": 768px,\r\n    \"desktop\": 1366px,\r\n    \"LGdesktop\": 1920px\r\n  ) !default;\r\n  \r\n  ///\r\n  /// Creates a list of static expressions or media types\r\n  ///\r\n  ///\r\n  /// @example scss - Creates a single media type (screen)\r\n  ///  $media-expressions: ('screen': 'screen');\r\n  ///\r\n  /// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n  ///  $media-expressions: (\r\n  ///\t\t'retina2x': (\r\n  ///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n  ///\t\t\t'(min-resolution: 192dpi)'\r\n  ///\t\t)\r\n  ///\t);\r\n  ///\r\n  $media-expressions: (\r\n    \"screen\": \"screen\",\r\n    \"print\": \"print\",\r\n    \"handheld\": \"handheld\",\r\n    \"retina2x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 2)\",\r\n      \"(min-resolution: 192dpi)\"\r\n    ),\r\n    \"retina3x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 3)\",\r\n      \"(min-resolution: 350dpi)\"\r\n    )\r\n  ) !default;\r\n  \r\n  ///\r\n  /// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n  ///\r\n  ///\r\n  /// @example scss - Interval for pixels is defined as `1` by default\r\n  ///  @include media(\">128px\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 129px) {}\r\n  ///\r\n  /// @example scss - Interval for ems is defined as `0.01` by default\r\n  ///  @include media(\">20em\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 20.01em) {}\r\n  ///\r\n  /// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n  ///  @include media(\">2.0rem\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 2.1rem) {}\r\n  ///\r\n  $unit-intervals: (\r\n    \"px\": 1,\r\n    \"em\": 0.01,\r\n    \"rem\": 0.1\r\n  ) !default;\r\n  ///\r\n  /// Generates a media query based on a list of conditions\r\n  ///\r\n  ///\r\n  /// @param {List}   $conditions  - Media query conditions\r\n  ///\r\n  /// @example scss - With a single set breakpoint\r\n  ///  @include media(\">phone\") { }\r\n  ///\r\n  /// @example scss - With two set breakpoints\r\n  ///  @include media(\">phone\", \"<=tablet\") { }\r\n  ///\r\n  /// @example scss - With custom values\r\n  ///  @include media(\">=358px\", \"<850px\") { }\r\n  ///\r\n  /// @example scss - With set breakpoints with custom values\r\n  ///  @include media(\">desktop\", \"<=1350px\") { }\r\n  ///\r\n  /// @example scss - With a static expression\r\n  ///  @include media(\"retina2x\") { }\r\n  ///\r\n  /// @example scss - Mixing everything\r\n  ///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n  ///\r\n  @mixin media($conditions...) {\r\n    @for $i from 1 through length($conditions) {\r\n      $conditions: set-nth(\r\n        $conditions,\r\n        $i,\r\n        parse-expression(nth($conditions, $i))\r\n      );\r\n    }\r\n  \r\n    $branches: get-query-branches($conditions);\r\n    $query: \"\";\r\n  \r\n    @each $branch in $branches {\r\n      @if (str-length($query) != 0) {\r\n        $query: $query + \", \";\r\n      }\r\n  \r\n      $query: $query + $branch;\r\n    }\r\n  \r\n    @media #{$query} {\r\n      @content;\r\n    }\r\n  }\r\n  \r\n  ///\r\n  /// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n  ///\r\n  ///\r\n  /// @param {List}   $expressions  - list of expressions\r\n  ///\r\n  /// @throws `$expression` is not a valid expression\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function get-query-branches($expressions) {\r\n    $result: \"\";\r\n    $has-groups: false;\r\n  \r\n    // Getting initial snapshot and looking for groups\r\n    @each $expression in $expressions {\r\n      @if (str-length($result) != 0) {\r\n        $result: $result + \" and \";\r\n      }\r\n  \r\n      @if (type-of($expression) == \"string\") {\r\n        $result: $result + $expression;\r\n      } @else if (type-of($expression) == \"list\") {\r\n        $result: $result + nth($expression, 1);\r\n        $has-groups: true;\r\n      } @else {\r\n        @warn '#{$expression} is not a valid expression.';\r\n      }\r\n    }\r\n  \r\n    // If we have groups, we have to create all possible combinations\r\n    @if $has-groups {\r\n      @each $expression in $expressions {\r\n        @if (type-of($expression) == \"list\") {\r\n          $first: nth($expression, 1);\r\n  \r\n          @each $member in $expression {\r\n            @if ($member != $first) {\r\n              @each $partial in $result {\r\n                $result: join(\r\n                  $result,\r\n                  str-replace-first($first, $member, $partial)\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    @return $result;\r\n  }\r\n  \r\n  ///\r\n  /// Parses a string to form a media query expression\r\n  ///\r\n  ///\r\n  /// @param {String}   $expression  - expression (in string)\r\n  ///\r\n  /// @throws Expression with type `type-of($expression)` detected, string expected\r\n  /// @throws `$expression` is missing an operator\r\n  /// @throws Unknown unit: `$unit`\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function parse-expression($expression) {\r\n    $operator: \"\";\r\n    $value: \"\";\r\n    $element: \"\";\r\n    $result: \"\";\r\n    $is-width: true;\r\n  \r\n    @if (type-of($expression) != \"string\") {\r\n      @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n    }\r\n  \r\n    // Separating the operator from the rest of the expression\r\n    @if (str-slice($expression, 2, 2) == \"=\") {\r\n      $operator: str-slice($expression, 1, 2);\r\n      $value: str-slice($expression, 3);\r\n    } @else {\r\n      $operator: str-slice($expression, 1, 1);\r\n      $value: str-slice($expression, 2);\r\n    }\r\n  \r\n    // Checking what type of expression we're dealing with\r\n    @if map-has-key($breakpoints, $value) {\r\n      $result: map-get($breakpoints, $value);\r\n    } @else if map-has-key($media-expressions, $expression) {\r\n      $result: map-get($media-expressions, $expression);\r\n      $is-width: false;\r\n    } @else {\r\n      $result: to-number($value);\r\n    }\r\n  \r\n    @if ($is-width) {\r\n      $unit: unit($result);\r\n      $interval: 0;\r\n  \r\n      @if (map-has-key($unit-intervals, $unit)) {\r\n        $interval: map-get($unit-intervals, $unit);\r\n      } @else {\r\n        @warn 'Unknown unit: #{$unit}';\r\n      }\r\n  \r\n      @if ($operator == \">\") {\r\n        $element: \"(min-width: #{$result + $interval})\";\r\n      } @else if ($operator == \"<\") {\r\n        $element: \"(max-width: #{$result - $interval})\";\r\n      } @else if ($operator == \">=\") {\r\n        $element: \"(min-width: #{$result})\";\r\n      } @else if ($operator == \"<=\") {\r\n        $element: \"(max-width: #{$result})\";\r\n      } @else {\r\n        @warn '#{$expression} is missing an operator.';\r\n      }\r\n    } @else {\r\n      $element: $result;\r\n    }\r\n  \r\n    @return $element;\r\n  }\r\n  \r\n  ///\r\n  /// Replaces the first occurence of the string with the replacement string\r\n  ///\r\n  ///\r\n  /// @param {String}   $search  - The value being searched for\r\n  /// @param {String}   $replace  - The replacement string\r\n  /// @param {String}   $subject  - The string being replaced on\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function str-replace-first($search, $replace, $subject) {\r\n    $search-start: str-index($subject, $search);\r\n  \r\n    @if $search-start == null {\r\n      @return $subject;\r\n    }\r\n  \r\n    $result: str-slice($subject, 0, $search-start - 1);\r\n    $result: $result + $replace;\r\n    $result: $result + str-slice($subject, $search-start + str-length($search));\r\n  \r\n    @return $result;\r\n  }\r\n  \r\n  ///\r\n  /// Casts a number to a string\r\n  ///\r\n  ///\r\n  /// @param {String}   $string  - Number to be parsed\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function to-number($string) {\r\n    // Matrices\r\n    $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n    $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n  \r\n    // Result\r\n    $result: 0;\r\n    $divider: 0;\r\n    $minus: false;\r\n  \r\n    // Looping through all characters\r\n    @for $i from 1 through str-length($string) {\r\n      $character: str-slice($string, $i, $i);\r\n      $index: index($strings, $character);\r\n  \r\n      @if $character == \"-\" {\r\n        $minus: true;\r\n      } @else if $character == \".\" {\r\n        $divider: 1;\r\n      } @else {\r\n        @if type-of($index) != \"number\" {\r\n          $result: if($minus, $result * -1, $result);\r\n          @return _length($result, str-slice($string, $i));\r\n        }\r\n  \r\n        $number: nth($numbers, $index);\r\n  \r\n        @if $divider == 0 {\r\n          $result: $result * 10;\r\n        } @else {\r\n          // Move the decimal dot to the left\r\n          $divider: $divider * 10;\r\n          $number: $number / $divider;\r\n        }\r\n  \r\n        $result: $result + $number;\r\n      }\r\n    }\r\n  \r\n    @return if($minus, $result * -1, $result);\r\n  }\r\n  \r\n  @function _length($number, $unit) {\r\n    $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n      \"vh\" \"vmin\" \"vmax\";\r\n    $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n    $index: index($strings, $unit);\r\n  \r\n    @if type-of($index) != \"number\" {\r\n      @warn 'Unknown unit `#{$unit}`.';\r\n      @return false;\r\n    }\r\n  \r\n    @return $number * nth($units, $index);\r\n  }\r\n  "]}